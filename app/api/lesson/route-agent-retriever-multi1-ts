import fs from "fs";
import {
  StreamingTextResponse,
  LangChainStream,
  Message,
  experimental_StreamData,
} from "ai";
import { ChatOpenAI, OpenAIEmbeddings } from "@langchain/openai";
import { ChatAnthropic } from "@langchain/anthropic";
import {
  AgentExecutor,
  AgentFinish,
  AgentStep,
  createOpenAIFunctionsAgent,
} from "langchain/agents";
import { DynamicTool, DynamicStructuredTool } from "@langchain/core/tools";
import { formatXml } from "langchain/agents/format_scratchpad/xml";
import {
  SystemMessagePromptTemplate,
  HumanMessagePromptTemplate,
} from "@langchain/core/prompts";
import {
  AIMessage,
  HumanMessage,
  SystemMessage,
  FunctionMessage, BaseMessage
} from "@langchain/core/messages";
import { ChatMessageHistory } from "langchain/stores/message/in_memory";
import { createStuffDocumentsChain } from "langchain/chains/combine_documents";
import { createRetrievalChain } from "langchain/chains/retrieval";
import { createRetrieverTool } from "langchain/tools/retriever";
import {
  ChatPromptTemplate,
  MessagesPlaceholder,
  PromptTemplate,
} from "@langchain/core/prompts";
import {
  TavilySearchAPIRetrieverFields,
  TavilySearchResults,
} from "@langchain/community/tools/tavily_search";
import { SearchApi, WikipediaQueryRun, formatToOpenAIFunction } from "langchain/tools";
import { formatToOpenAIFunctionMessages} from 'langchain/agents/format_scratchpad'

import { Document } from "langchain/document";
import {
  StringOutputParser,
  BytesOutputParser,
} from "@langchain/core/output_parsers";
import { HttpResponseOutputParser } from "langchain/output_parsers";
import { CheerioWebBaseLoader } from "langchain/document_loaders/web/cheerio";
import { RecursiveCharacterTextSplitter } from "langchain/text_splitter";
import { MemoryVectorStore } from "langchain/vectorstores/memory";
import {
  RunnableSequence,
  RunnablePick,
  RunnableMap,
  RunnablePassthrough,
  RunnableWithMessageHistory,
} from "@langchain/core/runnables";
import { Tool, ToolParams } from "langchain/tools";

import { renderTextDescription } from "langchain/tools/render";
import { Tool as AITool } from "ai";
import { NextResponse } from "next/server";
import { GithubRepoLoader } from "langchain/document_loaders/web/github";
import * as parse from "pdf-parse";
import { PDFLoader } from "langchain/document_loaders/fs/pdf";
import { similarity } from "ml-distance";
import { Pinecone } from "@pinecone-database/pinecone";
import { PineconeStore } from "@langchain/pinecone";
import { convertDocsToString, getPineconeRetriever } from "./helpers";
import { BufferMemory } from "langchain/memory";
import hub, { pull } from "langchain/hub";


import z, { input } from "zod";
import { bingSearch, duckDuckGoZero, scrapeWebPage, scrapeWithProxy } from "@/lib/tool-functions";
import zodToJsonSchema from "zod-to-json-schema";
import { FunctionsAgentAction, OpenAIFunctionsAgentOutputParser } from "langchain/agents/openai/output_parser";
import { convertToOpenAIFunction } from "@langchain/core/utils/function_calling";
import { XMLOutputParser } from "@langchain/core/output_parsers";
import { XMLAgentOutputParser } from "langchain/agents/xml/output_parser";
import { ChainValues } from "langchain/schema";
import { ExaSearchResults } from "@langchain/exa";
import Exa from "exa-js";

//export const runtime = "edge";

const webSite = "https://python.langchain.com/docs/get_started/introduction";
const webSite2 = "https://www.cruisebrothers.com/specials";
const webSite3 = "https://www.amazon.com/";

export async function POST(req: Request) {
  let response: ChainValues | string = { message: "Hello" };
  let result: any = "testing";
  const {
    messages,
    systemPrompt,
  }: { messages: Message[]; systemPrompt: string } = await req.json();

  // const test = await scrapeWebPage(webSite3);
  // console.log(test);
  //return NextResponse.json(response);

  const data = new experimental_StreamData();

  // important: use LangChainStream from the AI SDK:
  const { stream, handlers } = LangChainStream({
    // onCompletion: (resp) => {
    //   data.append(JSON.stringify({response: resp})); // example
    //   data.close();
    // },
    onCompletion: (resp) => {
      console.log("onCompletion", resp);
    },
    onStart: () => {
      console.log("onStart");
      // data.appendMessageAnnotation({ text: "onStart" });
      // data.append(JSON.stringify({ text2: "onStart" }));
    },
    onText: (resp) => {
      console.log("onText", resp);
      // data.appendMessageAnnotation({ text: "resp" });
      // data.append(JSON.stringify({ text2: "resp" }));
    },

    onToken: (resp) => {
      console.log("onToken", resp);
      // data.appendMessageAnnotation({ text: resp });
      // data.append(JSON.stringify({ text2: resp }));
    },
    onFinal: (resp) => {
      console.log("onFinal", resp);
      //data.appendMessageAnnotation({ text: "resp" });
      data.append(JSON.stringify(resp));
      data.close();
    },
    experimental_streamData: true,
  });

  // RETRIEVER
  const INDEX_NAME = "agent-multitask-test-1";

  const TEMPLATE_STRING = `Your are a friendly robot. Use the provided tool to answer the users question. If you can't find the answer using the tool, just reply 'Sorry, I don't know that yet'.

  <agent_scratchpad>
  {agent_scratchpad}
  </agent_scratchpad>

 

    `;

  const vectorStore = new MemoryVectorStore(new OpenAIEmbeddings());
  await vectorStore.addDocuments([
    {
      pageContent:
        "The sky is blue because of the way the atmosphere scatters sunlight. The short-wavelength blue and violet are scattered by the air molecules and other particles in the atmosphere. ",
      metadata: {},
    },
    {
      pageContent:
        "The color of the sky varies with the conditions of the atmosphere. On days when the sky is clear, the sky is blue. On days when the sky is cloudy, the sky is gray. At sunrise and sunset, the sky is red. The sky is black at night.",
      metadata: {},
    },
  ]);

  const retriever = vectorStore.asRetriever();

  const prompt = ChatPromptTemplate.fromMessages([
    ["system", TEMPLATE_STRING],
    new MessagesPlaceholder("history"),
    ["human", "{question}"],
  ]);

  // AGENT

  const tools = [
    new DynamicTool({
      name: "Sky_Question_Answerer",
      description:
        "Call this to get answers to questions about the sky. input should be a question string",
      func: async (question) =>
        convertDocsToString(await retriever.invoke(question)),
    }),
    new DynamicTool({
      name: "get_word_length",
      description: "Returns the length of a word.",
      func: async (input: string) => input.length.toString(),
    }),
    new DynamicTool({
      name: "get_best_song_ever",
      description: "Returns the name of the best song ever.",
      func: async () => "Never too much by Luther Vandross",
    }),
    new DynamicTool({
      name: "general-info-web-search",
      description: "use this for searching sites like wikipedia for historical information by entering a string search query.",
      func: async (input: string) => {
        
        return duckDuckGoZero(input);
      },
    }),
    new DynamicTool({
      name: "current-info-web-search",
      description: "use this to search the web for current news and information by entering a string search query.",
      func: async (input: string) => {
        
        return bingSearch(input);
      },
    }),
  ];

  // const test = await tools[4].invoke("Superbowl 24!")
  // console.log(test)

  // return NextResponse.json(response);

  const chatHistory = messages.slice(0, -1).map((message) => {
    return message.role == "user"
      ? new HumanMessage(message.content)
      : new AIMessage(message.content);
  });

  const model = new ChatOpenAI({
    modelName: "gpt-3.5-turbo",
    temperature: 0,
    streaming: true,
    maxTokens: 128,
    verbose: true,


  });

  const modelWithFunctions = model.bind({
    functions: tools.map((tool) => convertToOpenAIFunction(tool))
  }, )

  const MEMORY_KEY = "chat_history";
  const memoryPrompt = ChatPromptTemplate.fromMessages([
    [
      "system",
      "You are an assistant with limited knowledge. Use the provided tools to answer the user's question. If you can't find the answer using the tools, just reply 'Sorry, I don't know that yet'.",
    ],
    new MessagesPlaceholder(MEMORY_KEY),
    ["user", "{input}"],
    new MessagesPlaceholder("agent_scratchpad"),
  ]);

  const agentWithMemory = RunnableSequence.from([
    {
      input: (i) => i.input,
      agent_scratchpad: (i) => formatToOpenAIFunctionMessages(i.steps),
      chat_history: (i) => i.chat_history,
    },
    memoryPrompt,
    modelWithFunctions,
    new OpenAIFunctionsAgentOutputParser()

  ])

  const executorWithMemory = AgentExecutor.fromAgentAndTools({
    agent: agentWithMemory,
    tools,
    callbacks: [handlers],
    maxIterations: 3,
    verbose: true,
    returnIntermediateSteps: true,
  })
 

  // const agentExecutor = new AgentExecutor({
  //   agent,
  //   tools,
  //   verbose: true,
  //   maxIterations: 3,
   
  // });

  response = executorWithMemory
    .invoke(
      {
        //input: `what is the web page 'https://cheerio.js.org/docs/intro' about?`,
        //input: 'what color is the sky?',
        input: messages[messages.length - 1].content,
        
        chat_history: chatHistory,
      },
      { callbacks: [handlers] }
    )
    .catch(console.error);

  console.log(response);

  //  response = await agentExecutor.invoke({
  //   input: messages[messages.length - 1].content
  //  })

  //return NextResponse.json(response);
  return new StreamingTextResponse(stream, {}, data);
}
