"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prefix = exports.data = exports.print = exports.highlight = exports.success = exports.warning = exports.error = exports.debug = exports.trace = exports.increaseVerbosity = exports.setCI = exports.setLogLevel = exports.CI = exports.logLevel = exports.LogLevel = exports.withCorkedLogging = void 0;
const util = require("util");
const chalk = require("chalk");
const { stdout, stderr } = process;
async function withCorkedLogging(block) {
    corkLogging();
    try {
        return await block();
    }
    finally {
        uncorkLogging();
    }
}
exports.withCorkedLogging = withCorkedLogging;
let CORK_COUNTER = 0;
const logBuffer = [];
function corked() {
    return CORK_COUNTER !== 0;
}
function corkLogging() {
    CORK_COUNTER += 1;
}
function uncorkLogging() {
    CORK_COUNTER -= 1;
    if (!corked()) {
        logBuffer.forEach(([stream, str]) => stream.write(str + '\n'));
        logBuffer.splice(0);
    }
}
const logger = (stream, styles, timestamp) => (fmt, ...args) => {
    const ts = timestamp ? `[${formatTime(new Date())}] ` : '';
    let str = ts + util.format(fmt, ...args);
    if (styles && styles.length) {
        str = styles.reduce((a, style) => style(a), str);
    }
    const realStream = typeof stream === 'function' ? stream() : stream;
    // Logger is currently corked, so we store the message to be printed
    // later when we are uncorked.
    if (corked()) {
        logBuffer.push([realStream, str]);
        return;
    }
    realStream.write(str + '\n');
};
function formatTime(d) {
    return `${lpad(d.getHours(), 2)}:${lpad(d.getMinutes(), 2)}:${lpad(d.getSeconds(), 2)}`;
    function lpad(x, w) {
        const s = `${x}`;
        return '0'.repeat(Math.max(w - s.length, 0)) + s;
    }
}
var LogLevel;
(function (LogLevel) {
    /** Not verbose at all */
    LogLevel[LogLevel["DEFAULT"] = 0] = "DEFAULT";
    /** Pretty verbose */
    LogLevel[LogLevel["DEBUG"] = 1] = "DEBUG";
    /** Extremely verbose */
    LogLevel[LogLevel["TRACE"] = 2] = "TRACE";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
exports.logLevel = LogLevel.DEFAULT;
exports.CI = false;
function setLogLevel(newLogLevel) {
    exports.logLevel = newLogLevel;
}
exports.setLogLevel = setLogLevel;
function setCI(newCI) {
    exports.CI = newCI;
}
exports.setCI = setCI;
function increaseVerbosity() {
    exports.logLevel += 1;
}
exports.increaseVerbosity = increaseVerbosity;
const stream = () => exports.CI ? stdout : stderr;
const _debug = logger(stream, [chalk.gray], true);
const trace = (fmt, ...args) => exports.logLevel >= LogLevel.TRACE && _debug(fmt, ...args);
exports.trace = trace;
const debug = (fmt, ...args) => exports.logLevel >= LogLevel.DEBUG && _debug(fmt, ...args);
exports.debug = debug;
exports.error = logger(stderr, [chalk.red]);
exports.warning = logger(stream, [chalk.yellow]);
exports.success = logger(stream, [chalk.green]);
exports.highlight = logger(stream, [chalk.bold]);
exports.print = logger(stream);
exports.data = logger(stdout);
/**
 * Create a logger output that features a constant prefix string.
 *
 * @param prefixString the prefix string to be appended before any log entry.
 * @param fn   the logger function to be used (typically one of the other functions in this module)
 *
 * @returns a new LoggerFunction.
 */
function prefix(prefixString, fn) {
    return (fmt, ...args) => fn(`%s ${fmt}`, prefixString, ...args);
}
exports.prefix = prefix;
//# sourceMappingURL=data:application/json;base64,